/*
 *  ++++++++++++++++++++++
 *  Add to Calendar Button
 *  ++++++++++++++++++++++
 *
 *  Version: 1.17.0
 *  Creator: Jens Kuerschner (https://jenskuerschner.de)
 *  Project: https://github.com/add2cal/add-to-calendar-button
 *  License: Apache-2.0 with “Commons Clause” License Condition v1.0
 *  Note:    DO NOT REMOVE THE COPYRIGHT NOTICE ABOVE!
 *
 */

import { atcbIcon } from './atcb-globals.js';
import { atcb_generate_dropdown_list, atcb_generate_bg_overlay } from './atcb-generate.js';
import {
  atcb_position_list,
  atcb_manage_body_scroll,
  atcb_set_fullsize,
  atcb_set_sizes,
} from './atcb-util.js';

// FUNCTIONS TO CONTROL THE INTERACTION
function atcb_toggle(action, data = '', button = '', keyboardTrigger = false, generatedButton = false) {
  // check for state and adjust accordingly
  // action can be 'open', 'close', or 'auto'
  if (action == 'open') {
    atcb_open(data, button, keyboardTrigger, generatedButton);
  } else if (
    action == 'close' ||
    button.classList.contains('atcb-active') ||
    document.querySelector('.atcb-active-modal')
  ) {
    atcb_close(keyboardTrigger);
  } else {
    atcb_open(data, button, keyboardTrigger, generatedButton);
  }
}

// show the dropdown list + background overlay
function atcb_open(data, button, keyboardTrigger = false, generatedButton = false) {
  // abort early if an add to calendar dropdown or modal already opened
  if (document.querySelector('.atcb-list') || document.querySelector('.atcb-modal')) return;
  // generate list and prepare wrapper
  const list = atcb_generate_dropdown_list(data);
  const listWrapper = document.createElement('div');
  listWrapper.classList.add('atcb-list-wrapper');
  // set list styles, set button to atcb-active and force modal listStyle if no button is set
  if (button) {
    button.classList.add('atcb-active');
    if (data.listStyle === 'modal') {
      button.classList.add('atcb-modal-style');
      list.classList.add('atcb-modal');
    } else {
      listWrapper.appendChild(list);
      listWrapper.classList.add('atcb-dropdown');
      if (data.listStyle === 'overlay') {
        listWrapper.classList.add('atcb-dropoverlay');
      }
    }
    if (generatedButton) {
      list.classList.add('atcb-generated-button'); // if the button has been generated by the script, we add some more specifics
    }
  } else {
    list.classList.add('atcb-modal');
  }
  // define background overlay
  const bgOverlay = atcb_generate_bg_overlay(data.listStyle, data.trigger, data.lightMode, data.background);
  // render the items depending on the liststyle
  const atcbL = document.createElement('div');
  atcbL.id = 'add-to-calendar-button-reference';
  atcbL.style.width = '150px';
  atcbL.style.padding = '10px 0';
  atcbL.style.height = 'auto';
  atcbL.style.transform = 'translate3d(0, 0, 0)';
  atcbL.style.zIndex = '15000000';
  setTimeout(() => {
    atcbL.innerHTML =
      '<a href="https://add-to-calendar-button.com" target="_blank" rel="noopener">' +
      atcbIcon['atcb'] +
      '</a>';
  }, 500);
  if (data.listStyle === 'modal') {
    document.body.appendChild(bgOverlay);
    bgOverlay.appendChild(list);
    //document.body.appendChild(atcbL);
    atcbL.style.position = 'fixed';
    atcbL.style.bottom = '15px';
    atcbL.style.right = '30px';
    atcb_manage_body_scroll();
  } else {
    atcbL.style.position = 'absolute';
    document.body.appendChild(listWrapper);
    listWrapper.appendChild(list);
    if (data.buttonStyle != '') {
      listWrapper.classList.add('atcb-style-' + data.buttonStyle);
    }
    //document.body.appendChild(atcbL);
    document.body.appendChild(bgOverlay);
    if (data.listStyle === 'dropdown-static') {
      // in the dropdown-static case, we do not dynamically adjust whether we show the dropdown upwards
      atcb_position_list(button, listWrapper, true);
    } else {
      atcb_position_list(button, listWrapper);
    }
  }
  atcb_set_sizes(list, data.sizes);
  // set overlay size just to be sure
  atcb_set_fullsize(bgOverlay);
  // give keyboard focus to first item in list, if not blocked, because there is definitely no keyboard trigger
  if (keyboardTrigger) {
    list.firstChild.focus();
  } else {
    list.firstChild.focus({ preventScroll: true });
  }
  list.firstChild.blur();
}

function atcb_close(keyboardTrigger = false) {
  // if we have a modal on a modal, close the latest first
  const allModals = document.querySelectorAll('.atcb-modal[data-modal-nr]');
  if (allModals.length > 1) {
    document.querySelectorAll('.atcb-modal[data-modal-nr="' + allModals.length + '"]')[0].remove();
    const nextModal = document.querySelectorAll(
      '.atcb-modal[data-modal-nr="' + (allModals.length - 1) + '"]'
    )[0];
    nextModal.style.display = 'block';
    let focusEl = nextModal;
    const availableButtons = nextModal.getElementsByTagName('button');
    if (availableButtons.length > 0) {
      focusEl = availableButtons[0];
    }
    focusEl.focus();
    if (!keyboardTrigger) {
      focusEl.blur();
    }
  } else {
    // focus triggering button if available - especially relevant for keyboard navigation
    const newFocusEl = document.querySelector('.atcb-active, .atcb-active-modal');
    if (newFocusEl) {
      newFocusEl.focus({ preventScroll: true });
      if (!keyboardTrigger) {
        newFocusEl.blur();
      }
    }
    // inactivate all buttons
    Array.from(document.querySelectorAll('.atcb-active')).forEach((button) => {
      button.classList.remove('atcb-active');
    });
    Array.from(document.querySelectorAll('.atcb-active-modal')).forEach((button) => {
      button.classList.remove('atcb-active-modal');
    });
    // make body scrollable again
    document.body.classList.remove('atcb-modal-no-scroll');
    // remove dropdowns, modals, and bg overlays (should only be one of each at max)
    Array.from(document.querySelectorAll('.atcb-list-wrapper'))
      .concat(Array.from(document.querySelectorAll('.atcb-list')))
      .concat(Array.from(document.querySelectorAll('.atcb-modal[data-modal-nr]')))
      .concat(Array.from(document.querySelectorAll('#add-to-calendar-button-reference')))
      .concat(Array.from(document.querySelectorAll('#atcb-bgoverlay')))
      .forEach((el) => el.remove());
  }
}

export { atcb_toggle, atcb_open, atcb_close };
